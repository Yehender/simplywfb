#!/usr/bin/env python3
"""
Script de diagn√≥stico de conectividad para SimplifyWFB
Prueba la conectividad al servidor remoto y verifica credenciales
"""

import socket
import json
import sys
import os

def test_ssh_connectivity():
    """Probar conectividad SSH al servidor"""
    print("üîç DIAGN√ìSTICO DE CONECTIVIDAD SSH")
    print("=" * 50)
    
    # Cargar configuraci√≥n
    try:
        with open('config.json', 'r') as f:
            config = json.load(f)
        
        ssh_config = config['ssh_upload']
        host = ssh_config['host']
        port = ssh_config['port']
        username = ssh_config['username']
        password = ssh_config['password']
        
        print(f"üìç Servidor: {host}:{port}")
        print(f"üë§ Usuario: {username}")
        print(f"üîë Contrase√±a: {'*' * len(password)}")
        print()
        
    except Exception as e:
        print(f"‚ùå Error cargando configuraci√≥n: {e}")
        return False
    
    # 1. Probar conectividad b√°sica
    print("1Ô∏è‚É£ Probando conectividad b√°sica...")
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        result = sock.connect_ex((host, port))
        sock.close()
        
        if result == 0:
            print(f"‚úÖ Puerto {port} est√° abierto en {host}")
        else:
            print(f"‚ùå Puerto {port} est√° cerrado o no accesible en {host}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error de conectividad: {e}")
        return False
    
    # 2. Probar SSH con paramiko
    print("\n2Ô∏è‚É£ Probando conexi√≥n SSH...")
    try:
        import paramiko
        
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        print("   üîê Intentando autenticaci√≥n...")
        ssh.connect(host, port=port, username=username, password=password, timeout=10)
        
        print("   ‚úÖ Conexi√≥n SSH exitosa")
        
        # Probar comando b√°sico
        stdin, stdout, stderr = ssh.exec_command('whoami')
        user = stdout.read().decode().strip()
        print(f"   üë§ Usuario conectado: {user}")
        
        # Probar creaci√≥n de directorio
        stdin, stdout, stderr = ssh.exec_command('mkdir -p /reports')
        exit_status = stdout.channel.recv_exit_status()
        
        if exit_status == 0:
            print("   ‚úÖ Directorio /reports creado/verificado")
        else:
            print("   ‚ö†Ô∏è Error creando directorio /reports")
        
        ssh.close()
        return True
        
    except ImportError:
        print("   ‚ùå M√≥dulo 'paramiko' no instalado")
        print("   üí° Instalar con: pip install paramiko")
        return False
    except Exception as e:
        print(f"   ‚ùå Error SSH: {e}")
        return False

def test_http_connectivity():
    """Probar conectividad HTTP al servidor"""
    print("\nüåê DIAGN√ìSTICO DE CONECTIVIDAD HTTP")
    print("=" * 50)
    
    try:
        with open('config.json', 'r') as f:
            config = json.load(f)
        
        ssh_config = config['ssh_upload']
        host = ssh_config['host']
        
        print(f"üìç Servidor: {host}")
        print()
        
    except Exception as e:
        print(f"‚ùå Error cargando configuraci√≥n: {e}")
        return False
    
    # Probar HTTP
    print("1Ô∏è‚É£ Probando conectividad HTTP...")
    try:
        import urllib.request
        
        # Probar puerto 80
        url = f"http://{host}/"
        req = urllib.request.Request(url)
        req.add_header('User-Agent', 'SimplifyWFB/1.0')
        
        with urllib.request.urlopen(req, timeout=10) as response:
            print(f"‚úÖ HTTP accesible en puerto 80 (Status: {response.status})")
            return True
            
    except Exception as e:
        print(f"‚ùå HTTP no accesible: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üîß SimplifyWFB - Diagn√≥stico de Conectividad")
    print("=" * 60)
    
    # Verificar que existe config.json
    if not os.path.exists('config.json'):
        print("‚ùå Archivo config.json no encontrado")
        print("üí° Aseg√∫rate de estar en el directorio correcto")
        return
    
    # Probar SSH
    ssh_ok = test_ssh_connectivity()
    
    # Probar HTTP
    http_ok = test_http_connectivity()
    
    # Resumen
    print("\nüìä RESUMEN")
    print("=" * 30)
    print(f"SSH: {'‚úÖ OK' if ssh_ok else '‚ùå FALLO'}")
    print(f"HTTP: {'‚úÖ OK' if http_ok else '‚ùå FALLO'}")
    
    if ssh_ok:
        print("\nüéØ El servidor est√° configurado correctamente para SSH")
    elif http_ok:
        print("\n‚ö†Ô∏è SSH falla pero HTTP funciona (m√©todo alternativo)")
    else:
        print("\n‚ùå El servidor no est√° accesible")
        print("üí° Verifica:")
        print("   ‚Ä¢ IP y puerto correctos")
        print("   ‚Ä¢ Servidor encendido")
        print("   ‚Ä¢ Firewall configurado")
        print("   ‚Ä¢ Credenciales correctas")

if __name__ == "__main__":
    main()
